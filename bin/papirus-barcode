#!/usr/bin/env python

import os
import sys
from papirus import Papirus
from PIL import Image
import argparse
from barcode import generate
from barcode.writer import ImageWriter

# Command line usage
# papirus-draw "filepath" -t "crop|resize"

def main():
    papirus = Papirus()
    p = argparse.ArgumentParser()
    p.add_argument('barcode', type=str)
    p.add_argument('symbology', type=str, default="upca",help="barcode symbology: upca, code39...")
    p.add_argument('--type', '-t',type=str, default="resize", help="display type: crop or resize")
    args = p.parse_args()
    if args.barcode:
        print("Drawing on PaPiRus.......")
        draw_barcode(papirus, args.barcode, args.symbology, args.type)

def draw_barcode(papirus, barcode, symbology, type):
    message = ""
    # padding for placing the image
    xpadding = 0
    ypadding = 0
    
    writer = ImageWriter()
    writer.dpi = 111
    opts = {'write_text':False, 'module_width':.2}
    generate(symbology, barcode,writer=writer,output='/tmp/bc',writer_options=opts)
    
    # open the image to display
    file = Image.open('/tmp/bc.png')
    # display with crop option
    if type == "crop":
        # Landscape image
        if file.size[0] > file.size[1]:
            wsize = int(float(papirus.size[1]) * float(float(file.size[0]) / float(file.size[1])))
            file.thumbnail((wsize, papirus.size[1]), Image.ANTIALIAS)
            # centering the image
            xpadding = int((papirus.size[0] - file.size[0]) / 2)
            message = "Landscape image cropped!"
        # Portrait image
        else:
            hsize = int(float(file.size[0]) * float(float(papirus.size[1]) / float(papirus.size[0])))
            file.thumbnail((papirus.size[0], hsize), Image.ANTIALIAS)
            # centering the image
            ypadding = int((papirus.size[1] - file.size[1]) / 2)
            message = "Portrait image cropped!"
    # display resize option
    else:
        # Landscape image
        if file.size[0] > file.size[1]:
            file.thumbnail(papirus.size, Image.ANTIALIAS)
            ypadding = int((papirus.size[1] - file.size[1]) / 2)
            message = "Landscape image resized!"
        # Portrait image
        else:
            file.thumbnail(papirus.size, Image.ANTIALIAS)
            xpadding = int((papirus.size[0] - file.size[0]) / 2)
            message = "Portrait image resized!"
    # initially set all white background
    image = Image.new('1', papirus.size, 1)
    image.paste (file, (xpadding, ypadding))
    papirus.display(image)
    papirus.update()
    print(message)

if __name__ == '__main__':
    main()
